"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = void 0;
const tsutils_1 = require("tsutils");
const ts = __importStar(require("typescript"));
const Lint = __importStar(require("tslint"));
// tslint:disable:export-name
class Rule extends Lint.Rules.AbstractRule {
    apply(sourceFile) {
        return this.applyWithFunction(sourceFile, (ctx) => {
            const childCallback = (node) => {
                if ((0, tsutils_1.isCallExpression)(node) &&
                    (0, tsutils_1.isPropertyAccessExpression)(node.expression) &&
                    (0, tsutils_1.isIdentifier)(node.expression.expression) &&
                    node.expression.expression.text === 'require' &&
                    node.expression.getChildCount() === 3) {
                    const lastChild = node.expression.getChildAt(2);
                    if ((0, tsutils_1.isIdentifier)(lastChild) && lastChild.text === 'ensure') {
                        ctx.addFailureAtNode(node.expression, "Calls to 'require.ensure' are not allowed. Use 'import' instead.");
                    }
                }
                return ts.forEachChild(node, childCallback);
            };
            return ts.forEachChild(ctx.sourceFile, childCallback);
        });
    }
}
exports.Rule = Rule;
Rule.metadata = {
    ruleName: 'no-require-ensure',
    description: 'Warns about the use of the require.ensure function.',
    rationale: '`require.ensure` is outdated. Use `import(...)` instead.',
    optionsDescription: 'No options available.',
    options: {},
    type: 'functionality',
    typescriptOnly: false
};
//# sourceMappingURL=noRequireEnsureRule.js.map