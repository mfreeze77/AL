"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = void 0;
const tsutils_1 = require("tsutils");
const ts = __importStar(require("typescript"));
const Lint = __importStar(require("tslint"));
/**
 * Check for any functions with the `async` modifier. If a function does not have the `async`
 * modifier then we defer to TSC to fail on `await` keywords since `await` has to be used
 * within an `async` context.
 */
// tslint:disable-next-line:export-name
class Rule extends Lint.Rules.AbstractRule {
    apply(source) {
        return this.applyWithFunction(source, noAsyncAwait);
    }
}
exports.Rule = Rule;
Rule.metadata = {
    ruleName: 'no-async-await',
    description: 'Warn when using async/await functions.',
    rationale: 'async/await has overhead when emitting ES5 JavaScript',
    optionsDescription: 'No options available.',
    options: undefined,
    type: 'functionality',
    typescriptOnly: false
};
function noAsyncAwait(context, node) {
    if (!node) {
        ts.forEachChild(context.sourceFile, (n) => noAsyncAwait(context, n));
    }
    else {
        if ((0, tsutils_1.isArrowFunction)(node) ||
            (0, tsutils_1.isFunctionDeclaration)(node) ||
            (0, tsutils_1.isFunctionExpression)(node) ||
            (0, tsutils_1.isMethodDeclaration)(node)) {
            checkAndReportIfAsync(context, node);
        }
        ts.forEachChild(node, (n) => noAsyncAwait(context, n));
    }
}
function checkAndReportIfAsync(context, node) {
    if (node.body === undefined && node.type !== undefined) {
        return;
    }
    if (node.modifiers !== undefined &&
        node.modifiers.find((modifier) => modifier.kind === ts.SyntaxKind.AsyncKeyword)) {
        context.addFailureAtNode(node, 'async/await usage is not allowed');
    }
}
//# sourceMappingURL=noAsyncAwaitRule.js.map