"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = void 0;
const Lint = __importStar(require("tslint"));
const tsutils_1 = require("tsutils");
const ts = __importStar(require("typescript"));
/**
 * Validate valid GUID strings are being passed as an argument to SPKillSwitch.isActivated calls.
 * JavaScript does not have a native GUID type. We removed expensive runtime parsing during production
 * builds when checking kill switches. In order to ensure type safety, we are validating at build time with tslint.
 */
// tslint:disable-next-line:export-name
class Rule extends Lint.Rules.AbstractRule {
    apply(source) {
        return this.applyWithFunction(source, validKillSwitchGuid);
    }
}
exports.Rule = Rule;
Rule.metadata = {
    ruleName: 'valid-kill-switch-guid',
    description: 'Warn if _SPKillSwitch.isActivated is being called with an incorrect argument',
    rationale: 'Compile time type safety',
    optionsDescription: 'No options available.',
    options: undefined,
    type: 'functionality',
    typescriptOnly: false
};
function validKillSwitchGuid(context, node) {
    if (!node) {
        ts.forEachChild(context.sourceFile, (n) => validKillSwitchGuid(context, n));
    }
    else {
        if ((0, tsutils_1.isCallExpression)(node) && isSPKillSwitch(node) && !isValidGuid(node.arguments[0].getText())) {
            context.addFailureAtNode(node, '_SPKillSwitch.isActivated argument must be a valid, lower-case GUID');
        }
        ts.forEachChild(node, (n) => validKillSwitchGuid(context, n));
    }
}
function isSPKillSwitch(node) {
    return ((0, tsutils_1.isPropertyAccessExpression)(node.expression) &&
        node.expression.name.getText() === 'isActivated' &&
        (0, tsutils_1.isIdentifier)(node.expression.expression) &&
        (node.expression.expression.getText() === '_SPKillSwitch' ||
            node.expression.expression.getText() === 'SPKillSwitch') &&
        node.arguments.length === 1);
}
function isValidGuid(guidString) {
    return /^'[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}'$/.test(guidString);
}
//# sourceMappingURL=validKillSwitchGuidRule.js.map